// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/kotlin/io/github/tyv1/idea/promql/language/PromQL.flex

package io.github.tyv1.idea.promql.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import io.github.tyv1.idea.promql.language.PromQLTokenTypes;


class PromQLLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\1\7\1\0\1\10\1\0\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\7\25\1\26\1\0\1\27\1\30\1\31\1\0"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\44\1\64\1\65\1\66\1\67\1\70"+
    "\1\0\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\102\1\103\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\1\116\1\117"+
    "\1\120\1\121\1\44\1\122\1\0\1\123\1\124\6\0"+
    "\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\14\15\1\22\1\23\1\24"+
    "\20\15\1\25\1\26\1\27\1\30\1\0\1\31\1\0"+
    "\1\3\3\0\1\32\1\0\1\33\1\34\1\35\1\36"+
    "\3\15\1\37\6\15\1\40\1\41\6\15\1\0\23\15"+
    "\1\42\23\15\1\14\1\0\1\14\1\43\1\44\13\15"+
    "\1\0\1\42\1\15\1\44\3\15\1\42\16\15\1\44"+
    "\14\15\1\0\1\45\12\15\1\0\1\46\25\15\1\42"+
    "\2\15\1\42\1\14\1\15\2\44\7\15\1\0\1\47"+
    "\3\15\1\42\1\44\21\15\1\50\1\15\1\51\1\15"+
    "\1\0\1\42\22\15\1\52\17\15\1\53\25\15\1\54"+
    "\10\15\1\55\23\15";

  private static int [] zzUnpackAction() {
    int [] result = new int[343];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\125\0\252\0\377\0\u0154\0\u01a9\0\125\0\u01fe"+
    "\0\125\0\125\0\125\0\125\0\125\0\125\0\125\0\u0253"+
    "\0\u02a8\0\u02fd\0\u0352\0\u03a7\0\125\0\u03fc\0\u0451\0\u04a6"+
    "\0\u04fb\0\u0550\0\u05a5\0\u05fa\0\u064f\0\u06a4\0\u06f9\0\u074e"+
    "\0\u07a3\0\u07f8\0\125\0\125\0\u084d\0\u08a2\0\u08f7\0\u094c"+
    "\0\u09a1\0\u09f6\0\u0a4b\0\u0aa0\0\u0af5\0\u0b4a\0\u0b9f\0\u0bf4"+
    "\0\u0c49\0\u0c9e\0\u0cf3\0\u0d48\0\125\0\125\0\125\0\125"+
    "\0\u0154\0\125\0\u0d9d\0\125\0\u01fe\0\u0df2\0\u0e47\0\u0e9c"+
    "\0\u0ef1\0\125\0\125\0\125\0\125\0\u0f46\0\u0f9b\0\u0ff0"+
    "\0\u02a8\0\u1045\0\u109a\0\u10ef\0\u1144\0\u1199\0\u11ee\0\u02a8"+
    "\0\u02a8\0\u1243\0\u1298\0\u12ed\0\u1342\0\u1397\0\u13ec\0\u1441"+
    "\0\u1496\0\u14eb\0\u1540\0\u1595\0\u15ea\0\u163f\0\u1694\0\u16e9"+
    "\0\u173e\0\u1793\0\u17e8\0\u183d\0\u1892\0\u18e7\0\u193c\0\u1991"+
    "\0\u19e6\0\u1a3b\0\u1a90\0\u02a8\0\u1ae5\0\u1b3a\0\u1b8f\0\u1be4"+
    "\0\u1c39\0\u1c8e\0\u1ce3\0\u1d38\0\u1d8d\0\u1de2\0\u1e37\0\u1e8c"+
    "\0\u1ee1\0\u1f36\0\u1f8b\0\u1fe0\0\u2035\0\u208a\0\u20df\0\u2134"+
    "\0\u2189\0\u21de\0\u02a8\0\u02a8\0\u2233\0\u2288\0\u22dd\0\u2332"+
    "\0\u2387\0\u23dc\0\u2431\0\u2486\0\u24db\0\u2530\0\u2585\0\u25da"+
    "\0\u262f\0\u2684\0\u26d9\0\u272e\0\u2783\0\u27d8\0\u282d\0\u2882"+
    "\0\u28d7\0\u292c\0\u2981\0\u29d6\0\u2a2b\0\u2a80\0\u2ad5\0\u2b2a"+
    "\0\u2b7f\0\u2bd4\0\u2c29\0\u2c7e\0\u2cd3\0\u2d28\0\u2d7d\0\u2dd2"+
    "\0\u2e27\0\u2e7c\0\u2ed1\0\u2f26\0\u2f7b\0\u2fd0\0\u3025\0\u307a"+
    "\0\u30cf\0\u3124\0\u3179\0\u02a8\0\u31ce\0\u3223\0\u3278\0\u32cd"+
    "\0\u3322\0\u3377\0\u33cc\0\u3421\0\u3476\0\u34cb\0\u3520\0\125"+
    "\0\u3575\0\u35ca\0\u361f\0\u3674\0\u36c9\0\u371e\0\u3773\0\u37c8"+
    "\0\u381d\0\u3872\0\u38c7\0\u391c\0\u3971\0\u26d9\0\u39c6\0\u282d"+
    "\0\u3a1b\0\u3a70\0\u3ac5\0\u3b1a\0\u3b6f\0\u3bc4\0\u3c19\0\u3c6e"+
    "\0\u3cc3\0\u3179\0\u3d18\0\u3d6d\0\u3dc2\0\u3e17\0\u3e6c\0\u3ec1"+
    "\0\u3f16\0\u3f6b\0\u3fc0\0\u4015\0\u406a\0\125\0\u40bf\0\u4114"+
    "\0\u4169\0\u41be\0\u4213\0\u4268\0\u42bd\0\u4312\0\u4367\0\u43bc"+
    "\0\u4411\0\u4466\0\u44bb\0\u4510\0\u4565\0\u45ba\0\u460f\0\u4664"+
    "\0\u46b9\0\u470e\0\u4763\0\u47b8\0\u02a8\0\u480d\0\u02a8\0\u4862"+
    "\0\u48b7\0\u26d9\0\u490c\0\u4961\0\u49b6\0\u4a0b\0\u4a60\0\u4ab5"+
    "\0\u4b0a\0\u4b5f\0\u4bb4\0\u4c09\0\u4c5e\0\u4cb3\0\u4d08\0\u4d5d"+
    "\0\u4db2\0\u4e07\0\u4e5c\0\u4eb1\0\u02a8\0\u4f06\0\u4f5b\0\u4fb0"+
    "\0\u5005\0\u505a\0\u50af\0\u5104\0\u5159\0\u51ae\0\u5203\0\u5258"+
    "\0\u52ad\0\u5302\0\u5357\0\u53ac\0\u02a8\0\u5401\0\u5456\0\u54ab"+
    "\0\u5500\0\u5555\0\u55aa\0\u55ff\0\u5654\0\u56a9\0\u56fe\0\u5753"+
    "\0\u57a8\0\u57fd\0\u5852\0\u58a7\0\u58fc\0\u5951\0\u59a6\0\u59fb"+
    "\0\u5a50\0\u5aa5\0\u02a8\0\u5afa\0\u5b4f\0\u5ba4\0\u5bf9\0\u5c4e"+
    "\0\u5ca3\0\u5cf8\0\u5d4d\0\u02a8\0\u5da2\0\u5df7\0\u5e4c\0\u5ea1"+
    "\0\u5ef6\0\u5f4b\0\u5fa0\0\u5ff5\0\u604a\0\u609f\0\u60f4\0\u6149"+
    "\0\u619e\0\u61f3\0\u6248\0\u629d\0\u62f2\0\u6347\0\u639c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[343];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\2"+
    "\1\17\4\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\3\21\1\31\1\21\1\32\3\21\1\33"+
    "\1\21\1\34\1\21\1\35\1\21\1\36\1\37\1\40"+
    "\1\21\1\41\2\21\1\42\1\2\1\43\1\44\1\21"+
    "\1\45\1\27\1\46\1\47\1\50\1\51\1\31\1\52"+
    "\1\53\2\21\1\54\1\55\1\21\1\34\1\56\1\57"+
    "\1\60\1\61\1\62\1\40\1\63\1\41\1\21\1\64"+
    "\1\65\1\66\1\2\126\0\2\3\1\0\1\3\150\0"+
    "\1\67\73\0\1\70\6\71\1\72\56\71\1\73\37\71"+
    "\2\6\1\74\122\6\11\75\1\72\53\75\1\76\37\75"+
    "\20\0\1\77\1\0\4\20\46\0\1\100\1\101\2\0"+
    "\1\100\4\0\1\100\5\0\1\100\3\0\1\100\1\0"+
    "\1\100\25\0\5\21\4\0\31\21\4\0\32\21\33\0"+
    "\1\102\124\0\1\103\73\0\1\104\30\0\1\105\116\0"+
    "\5\21\4\0\15\21\1\106\7\21\1\107\3\21\4\0"+
    "\16\21\1\106\7\21\1\107\3\21\25\0\5\21\4\0"+
    "\16\21\1\110\11\21\1\111\4\0\17\21\1\110\11\21"+
    "\1\111\25\0\5\21\4\0\16\21\1\112\12\21\4\0"+
    "\17\21\1\112\12\21\25\0\5\21\4\0\21\21\1\113"+
    "\7\21\4\0\22\21\1\113\7\21\25\0\5\21\4\0"+
    "\6\21\1\114\22\21\4\0\7\21\1\114\22\21\25\0"+
    "\5\21\4\0\1\115\7\21\1\116\20\21\4\0\1\21"+
    "\1\115\7\21\1\116\20\21\25\0\5\21\4\0\5\21"+
    "\1\117\7\21\1\120\3\21\1\121\7\21\4\0\6\21"+
    "\1\117\7\21\1\120\3\21\1\121\7\21\25\0\5\21"+
    "\4\0\24\21\1\122\4\21\4\0\25\21\1\122\4\21"+
    "\25\0\5\21\4\0\23\21\1\123\1\124\4\21\4\0"+
    "\24\21\1\123\1\124\4\21\25\0\5\21\4\0\16\21"+
    "\1\125\12\21\4\0\17\21\1\125\12\21\25\0\5\21"+
    "\4\0\15\21\1\126\13\21\4\0\16\21\1\126\13\21"+
    "\25\0\5\21\4\0\10\21\1\127\20\21\4\0\11\21"+
    "\1\127\20\21\25\0\4\130\121\0\5\21\4\0\15\21"+
    "\1\106\7\21\1\107\3\21\4\0\2\21\1\131\1\132"+
    "\12\21\1\106\4\21\1\133\1\134\1\21\1\135\3\21"+
    "\25\0\5\21\4\0\16\21\1\112\12\21\4\0\5\21"+
    "\1\136\2\21\1\137\3\21\1\140\2\21\1\141\12\21"+
    "\25\0\5\21\4\0\31\21\4\0\1\21\1\142\3\21"+
    "\1\143\24\21\25\0\5\21\4\0\31\21\4\0\30\21"+
    "\1\144\1\21\25\0\5\21\4\0\31\21\4\0\14\21"+
    "\1\145\15\21\25\0\5\21\4\0\31\21\4\0\11\21"+
    "\1\146\5\21\1\147\12\21\25\0\5\21\4\0\6\21"+
    "\1\114\22\21\4\0\4\21\1\150\2\21\1\114\6\21"+
    "\1\151\3\21\1\152\7\21\25\0\5\21\4\0\31\21"+
    "\4\0\1\21\1\153\14\21\1\154\1\155\12\21\25\0"+
    "\5\21\4\0\1\115\7\21\1\116\20\21\4\0\1\21"+
    "\1\156\7\21\1\157\5\21\1\160\12\21\25\0\5\21"+
    "\4\0\31\21\4\0\11\21\1\154\10\21\1\161\7\21"+
    "\25\0\5\21\4\0\24\21\1\122\4\21\4\0\25\21"+
    "\1\162\4\21\25\0\5\21\4\0\31\21\4\0\1\21"+
    "\1\163\3\21\1\164\11\21\1\165\12\21\25\0\5\21"+
    "\4\0\23\21\1\123\1\124\4\21\4\0\3\21\1\166"+
    "\3\21\1\167\1\21\1\170\5\21\1\171\1\21\1\172"+
    "\2\21\1\173\1\174\4\21\25\0\5\21\4\0\16\21"+
    "\1\125\12\21\4\0\1\21\1\170\7\21\1\175\5\21"+
    "\1\125\12\21\25\0\5\21\4\0\31\21\4\0\5\21"+
    "\1\176\24\21\25\0\5\21\4\0\31\21\4\0\5\21"+
    "\1\177\24\21\3\0\2\71\3\0\120\71\2\75\3\0"+
    "\120\75\22\0\4\200\173\0\1\100\3\0\1\100\4\0"+
    "\1\100\5\0\1\100\3\0\1\100\1\0\1\100\20\0"+
    "\1\201\1\0\1\201\2\0\4\202\121\0\5\21\4\0"+
    "\3\21\1\203\25\21\4\0\4\21\1\203\25\21\25\0"+
    "\5\21\4\0\6\21\1\204\22\21\4\0\7\21\1\204"+
    "\22\21\25\0\5\21\4\0\16\21\1\205\4\21\1\206"+
    "\5\21\4\0\17\21\1\205\4\21\1\206\5\21\25\0"+
    "\5\21\4\0\24\21\1\207\4\21\4\0\25\21\1\207"+
    "\4\21\25\0\5\21\4\0\16\21\1\210\12\21\4\0"+
    "\17\21\1\210\12\21\25\0\5\21\4\0\15\21\1\211"+
    "\13\21\4\0\16\21\1\211\13\21\25\0\5\21\4\0"+
    "\27\21\1\204\1\21\4\0\30\21\1\204\1\21\25\0"+
    "\5\21\4\0\15\21\1\204\13\21\4\0\16\21\1\204"+
    "\13\21\25\0\5\21\4\0\5\21\1\212\23\21\4\0"+
    "\6\21\1\212\23\21\25\0\5\21\4\0\1\213\30\21"+
    "\4\0\1\21\1\213\30\21\25\0\5\21\4\0\3\21"+
    "\1\214\25\21\4\0\4\21\1\214\25\21\25\0\5\21"+
    "\4\0\14\21\1\204\14\21\4\0\15\21\1\204\14\21"+
    "\25\0\5\21\4\0\17\21\1\215\11\21\4\0\20\21"+
    "\1\215\11\21\25\0\5\21\4\0\13\21\1\216\15\21"+
    "\4\0\14\21\1\216\15\21\25\0\5\21\4\0\23\21"+
    "\1\217\5\21\4\0\24\21\1\217\5\21\25\0\4\130"+
    "\46\0\1\220\3\0\1\220\4\0\1\220\5\0\1\220"+
    "\3\0\1\220\1\0\1\220\25\0\5\21\4\0\31\21"+
    "\4\0\23\21\1\221\6\21\25\0\5\21\4\0\31\21"+
    "\4\0\17\21\1\222\12\21\25\0\5\21\4\0\31\21"+
    "\4\0\11\21\1\170\20\21\25\0\5\21\4\0\31\21"+
    "\4\0\1\21\1\170\30\21\25\0\5\21\4\0\6\21"+
    "\1\204\22\21\4\0\7\21\1\223\22\21\25\0\5\21"+
    "\4\0\31\21\4\0\11\21\1\224\20\21\25\0\5\21"+
    "\4\0\31\21\4\0\1\21\1\225\30\21\25\0\5\21"+
    "\4\0\31\21\4\0\1\21\1\226\30\21\25\0\5\21"+
    "\4\0\24\21\1\207\4\21\4\0\23\21\1\227\1\21"+
    "\1\230\4\21\25\0\5\21\4\0\31\21\4\0\31\21"+
    "\1\231\25\0\5\21\4\0\31\21\4\0\7\21\1\154"+
    "\4\21\1\232\5\21\1\233\7\21\25\0\5\21\4\0"+
    "\31\21\4\0\20\21\1\154\11\21\25\0\5\21\4\0"+
    "\31\21\4\0\17\21\1\234\12\21\25\0\5\21\4\0"+
    "\31\21\4\0\23\21\1\235\6\21\25\0\5\21\4\0"+
    "\31\21\4\0\14\21\1\236\10\21\1\237\4\21\25\0"+
    "\5\21\4\0\31\21\4\0\5\21\1\240\24\21\25\0"+
    "\5\21\4\0\31\21\4\0\3\21\1\241\26\21\25\0"+
    "\5\21\4\0\31\21\4\0\1\21\1\242\30\21\25\0"+
    "\5\21\4\0\31\21\4\0\2\21\1\243\20\21\1\244"+
    "\6\21\25\0\5\21\4\0\31\21\4\0\7\21\1\245"+
    "\22\21\25\0\5\21\4\0\27\21\1\204\1\21\4\0"+
    "\30\21\1\223\1\21\25\0\5\21\4\0\15\21\1\204"+
    "\13\21\4\0\16\21\1\246\13\21\25\0\5\21\4\0"+
    "\31\21\4\0\16\21\1\247\13\21\25\0\5\21\4\0"+
    "\31\21\4\0\5\21\1\250\24\21\25\0\5\21\4\0"+
    "\1\213\30\21\4\0\1\21\1\251\30\21\25\0\5\21"+
    "\4\0\31\21\4\0\4\21\1\154\17\21\1\252\5\21"+
    "\25\0\5\21\4\0\31\21\4\0\23\21\1\253\6\21"+
    "\25\0\5\21\4\0\31\21\4\0\25\21\1\254\4\21"+
    "\25\0\5\21\4\0\31\21\4\0\1\21\1\255\30\21"+
    "\25\0\5\21\4\0\31\21\4\0\16\21\1\154\13\21"+
    "\25\0\5\21\4\0\31\21\4\0\16\21\1\227\13\21"+
    "\25\0\5\21\4\0\31\21\4\0\22\21\1\256\7\21"+
    "\25\0\5\21\4\0\31\21\4\0\22\21\1\257\7\21"+
    "\25\0\5\21\4\0\3\21\1\214\25\21\4\0\4\21"+
    "\1\260\25\21\25\0\5\21\4\0\14\21\1\204\14\21"+
    "\4\0\15\21\1\223\14\21\25\0\5\21\4\0\31\21"+
    "\4\0\15\21\1\261\14\21\25\0\5\21\4\0\31\21"+
    "\4\0\3\21\1\262\26\21\25\0\5\21\4\0\31\21"+
    "\4\0\1\21\1\237\30\21\25\0\4\200\47\0\1\101"+
    "\51\0\4\202\117\0\1\263\1\0\4\202\121\0\5\21"+
    "\4\0\13\21\1\264\15\21\4\0\14\21\1\264\15\21"+
    "\25\0\5\21\4\0\23\21\1\265\5\21\4\0\24\21"+
    "\1\265\5\21\25\0\5\21\4\0\15\21\1\266\13\21"+
    "\4\0\16\21\1\266\13\21\25\0\5\21\4\0\24\21"+
    "\1\267\4\21\4\0\25\21\1\267\4\21\25\0\5\21"+
    "\4\0\16\21\1\270\12\21\4\0\17\21\1\270\12\21"+
    "\25\0\5\21\4\0\22\21\1\271\6\21\4\0\23\21"+
    "\1\271\6\21\25\0\5\21\4\0\15\21\1\272\13\21"+
    "\4\0\16\21\1\272\13\21\25\0\5\21\4\0\3\21"+
    "\1\273\21\21\1\274\3\21\4\0\4\21\1\273\21\21"+
    "\1\274\3\21\25\0\5\21\4\0\12\21\1\204\16\21"+
    "\4\0\13\21\1\204\16\21\25\0\5\21\4\0\4\21"+
    "\1\275\24\21\4\0\5\21\1\275\24\21\25\0\5\21"+
    "\4\0\7\21\1\276\21\21\4\0\10\21\1\276\21\21"+
    "\31\0\1\277\37\0\1\300\5\0\1\220\3\0\1\220"+
    "\4\0\1\220\5\0\1\220\3\0\1\220\1\0\1\220"+
    "\25\0\5\21\4\0\31\21\4\0\5\21\1\301\24\21"+
    "\25\0\5\21\4\0\31\21\4\0\23\21\1\227\6\21"+
    "\25\0\5\21\4\0\31\21\4\0\1\302\31\21\25\0"+
    "\5\21\4\0\31\21\4\0\14\21\1\154\15\21\25\0"+
    "\5\21\4\0\31\21\4\0\16\21\1\303\13\21\25\0"+
    "\5\21\4\0\31\21\4\0\15\21\1\304\14\21\25\0"+
    "\5\21\4\0\31\21\4\0\10\21\1\154\21\21\25\0"+
    "\5\21\4\0\15\21\1\266\13\21\4\0\16\21\1\305"+
    "\13\21\25\0\5\21\4\0\31\21\4\0\1\306\22\21"+
    "\1\307\6\21\25\0\5\21\4\0\31\21\4\0\24\21"+
    "\1\310\5\21\25\0\5\21\4\0\31\21\4\0\11\21"+
    "\1\311\20\21\25\0\5\21\4\0\31\21\4\0\17\21"+
    "\1\237\12\21\25\0\5\21\4\0\31\21\4\0\24\21"+
    "\1\312\5\21\25\0\5\21\4\0\31\21\4\0\24\21"+
    "\1\313\5\21\25\0\5\21\4\0\31\21\4\0\22\21"+
    "\1\154\7\21\25\0\5\21\4\0\31\21\4\0\14\21"+
    "\1\232\15\21\25\0\5\21\4\0\31\21\4\0\22\21"+
    "\1\314\7\21\25\0\5\21\4\0\31\21\4\0\24\21"+
    "\1\252\5\21\25\0\5\21\4\0\31\21\4\0\5\21"+
    "\1\315\24\21\25\0\5\21\4\0\31\21\4\0\24\21"+
    "\1\316\5\21\25\0\1\21\1\317\1\154\2\21\4\0"+
    "\31\21\4\0\32\21\25\0\5\21\4\0\31\21\4\0"+
    "\1\302\24\21\1\242\4\21\25\0\5\21\4\0\31\21"+
    "\4\0\24\21\1\320\5\21\25\0\5\21\4\0\31\21"+
    "\4\0\4\21\1\321\16\21\1\322\6\21\25\0\5\21"+
    "\4\0\15\21\1\272\13\21\4\0\16\21\1\323\13\21"+
    "\25\0\5\21\4\0\31\21\4\0\5\21\1\154\24\21"+
    "\25\0\5\21\4\0\31\21\4\0\5\21\1\324\24\21"+
    "\25\0\5\21\4\0\31\21\4\0\16\21\1\325\13\21"+
    "\25\0\5\21\4\0\31\21\4\0\14\21\1\177\15\21"+
    "\25\0\5\21\4\0\31\21\4\0\24\21\1\326\5\21"+
    "\25\0\5\21\4\0\31\21\4\0\24\21\1\154\5\21"+
    "\25\0\5\21\4\0\3\21\1\273\21\21\1\274\3\21"+
    "\4\0\4\21\1\327\21\21\1\330\3\21\25\0\5\21"+
    "\4\0\31\21\4\0\5\21\1\331\24\21\25\0\5\21"+
    "\4\0\31\21\4\0\24\21\1\234\5\21\25\0\4\332"+
    "\121\0\5\21\4\0\16\21\1\333\12\21\4\0\17\21"+
    "\1\333\12\21\25\0\5\21\4\0\23\21\1\334\5\21"+
    "\4\0\24\21\1\334\5\21\25\0\5\21\4\0\17\21"+
    "\1\335\11\21\4\0\20\21\1\335\11\21\25\0\5\21"+
    "\4\0\21\21\1\336\7\21\4\0\22\21\1\336\7\21"+
    "\25\0\5\21\4\0\4\21\1\337\24\21\4\0\5\21"+
    "\1\337\24\21\25\0\5\21\4\0\23\21\1\340\5\21"+
    "\4\0\24\21\1\340\5\21\25\0\5\21\4\0\4\21"+
    "\1\341\24\21\4\0\5\21\1\341\24\21\25\0\5\21"+
    "\4\0\1\342\30\21\4\0\1\21\1\342\30\21\25\0"+
    "\5\21\4\0\22\21\1\343\6\21\4\0\23\21\1\343"+
    "\6\21\25\0\5\21\4\0\16\21\1\344\12\21\4\0"+
    "\17\21\1\344\12\21\25\0\4\345\40\0\1\346\60\0"+
    "\5\21\4\0\31\21\4\0\16\21\1\347\13\21\25\0"+
    "\5\21\4\0\31\21\4\0\17\21\1\350\12\21\25\0"+
    "\5\21\4\0\31\21\4\0\7\21\1\351\22\21\25\0"+
    "\5\21\4\0\31\21\4\0\20\21\1\352\11\21\25\0"+
    "\5\21\4\0\23\21\1\334\5\21\4\0\24\21\1\353"+
    "\5\21\25\0\5\21\4\0\31\21\4\0\17\21\1\354"+
    "\12\21\25\0\5\21\4\0\31\21\4\0\1\355\31\21"+
    "\25\0\5\21\4\0\31\21\4\0\1\21\1\154\30\21"+
    "\25\0\5\21\4\0\31\21\4\0\26\21\1\154\3\21"+
    "\25\0\5\21\4\0\31\21\4\0\17\21\1\356\12\21"+
    "\25\0\5\21\4\0\31\21\4\0\1\357\31\21\25\0"+
    "\5\21\4\0\31\21\4\0\5\21\1\360\24\21\25\0"+
    "\5\21\4\0\31\21\4\0\14\21\1\361\15\21\25\0"+
    "\1\154\4\21\4\0\31\21\4\0\32\21\25\0\5\21"+
    "\4\0\31\21\4\0\11\21\1\362\20\21\25\0\5\21"+
    "\4\0\31\21\4\0\5\21\1\363\24\21\25\0\5\21"+
    "\4\0\23\21\1\340\5\21\4\0\24\21\1\364\5\21"+
    "\25\0\5\21\4\0\31\21\4\0\24\21\1\365\5\21"+
    "\25\0\5\21\4\0\31\21\4\0\4\21\1\154\25\21"+
    "\25\0\5\21\4\0\31\21\4\0\1\366\31\21\25\0"+
    "\5\21\4\0\4\21\1\341\24\21\4\0\5\21\1\367"+
    "\24\21\25\0\5\21\4\0\1\342\30\21\4\0\1\21"+
    "\1\370\30\21\25\0\5\21\4\0\31\21\4\0\23\21"+
    "\1\371\6\21\25\0\5\21\4\0\14\21\1\215\14\21"+
    "\4\0\15\21\1\215\14\21\25\0\5\21\4\0\31\21"+
    "\4\0\1\372\31\21\25\0\5\21\4\0\31\21\4\0"+
    "\1\373\31\21\25\0\5\21\4\0\10\21\1\374\20\21"+
    "\4\0\11\21\1\374\20\21\25\0\5\21\4\0\23\21"+
    "\1\375\5\21\4\0\24\21\1\375\5\21\25\0\5\21"+
    "\4\0\10\21\1\376\20\21\4\0\11\21\1\376\20\21"+
    "\25\0\5\21\4\0\25\21\1\204\3\21\4\0\26\21"+
    "\1\204\3\21\25\0\5\21\4\0\21\21\1\204\7\21"+
    "\4\0\22\21\1\204\7\21\25\0\5\21\4\0\22\21"+
    "\1\377\6\21\4\0\23\21\1\377\6\21\25\0\5\21"+
    "\4\0\24\21\1\u0100\4\21\4\0\25\21\1\u0100\4\21"+
    "\25\0\4\345\46\0\1\u0101\3\0\1\u0101\4\0\1\u0101"+
    "\5\0\1\u0101\3\0\1\u0101\1\0\1\u0101\25\0\5\21"+
    "\4\0\31\21\4\0\24\21\1\u0102\5\21\25\0\5\21"+
    "\4\0\31\21\4\0\26\21\1\u0103\3\21\25\0\5\21"+
    "\4\0\31\21\4\0\5\21\1\365\24\21\25\0\5\21"+
    "\4\0\31\21\4\0\1\u0104\31\21\25\0\5\21\4\0"+
    "\31\21\4\0\1\u0105\31\21\25\0\5\21\4\0\31\21"+
    "\4\0\6\21\1\u0106\23\21\25\0\5\21\4\0\31\21"+
    "\4\0\11\21\1\u0107\20\21\25\0\5\21\4\0\31\21"+
    "\4\0\7\21\1\u0108\22\21\25\0\5\21\4\0\31\21"+
    "\4\0\27\21\1\u0109\2\21\25\0\5\21\4\0\31\21"+
    "\4\0\1\21\1\u010a\30\21\25\0\5\21\4\0\31\21"+
    "\4\0\1\u010b\31\21\25\0\5\21\4\0\31\21\4\0"+
    "\3\21\1\u010c\26\21\25\0\5\21\4\0\31\21\4\0"+
    "\16\21\1\244\13\21\25\0\5\21\4\0\10\21\1\376"+
    "\20\21\4\0\11\21\1\u010d\20\21\25\0\5\21\4\0"+
    "\31\21\4\0\23\21\1\154\6\21\25\0\5\21\4\0"+
    "\31\21\4\0\4\21\1\u010e\25\21\25\0\5\21\4\0"+
    "\25\21\1\204\3\21\4\0\26\21\1\223\3\21\25\0"+
    "\5\21\4\0\21\21\1\204\7\21\4\0\22\21\1\223"+
    "\7\21\25\0\5\21\4\0\31\21\4\0\24\21\1\u010f"+
    "\5\21\25\0\5\21\4\0\25\21\1\u0110\3\21\4\0"+
    "\26\21\1\u0110\3\21\25\0\5\21\4\0\13\21\1\u0111"+
    "\5\21\1\u0112\7\21\4\0\14\21\1\u0111\5\21\1\u0112"+
    "\7\21\25\0\5\21\4\0\15\21\1\u0113\13\21\4\0"+
    "\16\21\1\u0113\13\21\25\0\5\21\4\0\13\21\1\u0114"+
    "\15\21\4\0\14\21\1\u0114\15\21\25\0\5\21\4\0"+
    "\23\21\1\u0115\5\21\4\0\24\21\1\u0115\5\21\71\0"+
    "\1\346\5\0\1\u0101\3\0\1\u0101\4\0\1\u0101\5\0"+
    "\1\u0101\3\0\1\u0101\1\0\1\u0101\25\0\5\21\4\0"+
    "\31\21\4\0\5\21\1\u0116\24\21\25\0\5\21\4\0"+
    "\31\21\4\0\15\21\1\u0117\14\21\25\0\5\21\4\0"+
    "\25\21\1\u0110\3\21\4\0\17\21\1\350\6\21\1\u0110"+
    "\3\21\25\0\5\21\4\0\31\21\4\0\1\u0118\31\21"+
    "\25\0\5\21\4\0\31\21\4\0\16\21\1\u0119\13\21"+
    "\25\0\5\21\4\0\31\21\4\0\22\21\1\u011a\7\21"+
    "\25\0\5\21\4\0\31\21\4\0\11\21\1\u011b\20\21"+
    "\25\0\5\21\4\0\31\21\4\0\23\21\1\252\6\21"+
    "\25\0\5\21\4\0\31\21\4\0\12\21\1\u011c\7\21"+
    "\1\u011d\7\21\25\0\5\21\4\0\31\21\4\0\24\21"+
    "\1\u011e\5\21\25\0\5\21\4\0\13\21\1\u0114\15\21"+
    "\4\0\14\21\1\u011f\15\21\25\0\5\21\4\0\31\21"+
    "\4\0\5\21\1\u0120\24\21\25\0\5\21\4\0\31\21"+
    "\4\0\1\21\1\u0121\30\21\25\0\5\21\4\0\1\u0122"+
    "\30\21\4\0\1\21\1\u0122\30\21\25\0\5\21\4\0"+
    "\4\21\1\u0123\24\21\4\0\5\21\1\u0123\24\21\25\0"+
    "\5\21\4\0\10\21\1\u0124\20\21\4\0\11\21\1\u0124"+
    "\20\21\25\0\5\21\4\0\6\21\1\u0125\22\21\4\0"+
    "\7\21\1\u0125\22\21\25\0\5\21\4\0\4\21\1\204"+
    "\24\21\4\0\5\21\1\204\24\21\25\0\5\21\4\0"+
    "\31\21\4\0\22\21\1\u0126\7\21\25\0\5\21\4\0"+
    "\31\21\4\0\1\21\1\u0127\7\21\1\167\20\21\25\0"+
    "\5\21\4\0\31\21\4\0\15\21\1\u0128\11\21\1\u0129"+
    "\1\21\1\64\25\0\5\21\4\0\31\21\4\0\1\u012a"+
    "\31\21\25\0\5\21\4\0\31\21\4\0\1\21\1\u012b"+
    "\30\21\25\0\5\21\4\0\31\21\4\0\16\21\1\u012c"+
    "\13\21\25\0\5\21\4\0\31\21\4\0\17\21\1\u012d"+
    "\12\21\25\0\5\21\4\0\31\21\4\0\5\21\1\u012e"+
    "\24\21\25\0\5\21\4\0\31\21\4\0\1\u012f\31\21"+
    "\25\0\5\21\4\0\4\21\1\204\24\21\4\0\5\21"+
    "\1\223\24\21\25\0\5\21\4\0\31\21\4\0\23\21"+
    "\1\u0130\6\21\25\0\5\21\4\0\31\21\4\0\15\21"+
    "\1\144\14\21\25\0\5\21\4\0\13\21\1\u0131\15\21"+
    "\4\0\14\21\1\u0131\15\21\25\0\5\21\4\0\5\21"+
    "\1\u0132\23\21\4\0\6\21\1\u0132\23\21\25\0\5\21"+
    "\4\0\6\21\1\u0133\22\21\4\0\7\21\1\u0133\22\21"+
    "\25\0\5\21\4\0\31\21\4\0\1\u0134\31\21\25\0"+
    "\5\21\4\0\31\21\4\0\30\21\1\154\1\21\25\0"+
    "\5\21\4\0\31\21\4\0\17\21\1\160\12\21\25\0"+
    "\5\21\4\0\31\21\4\0\5\21\1\u0135\24\21\25\0"+
    "\5\21\4\0\31\21\4\0\15\21\1\u0128\14\21\25\0"+
    "\5\21\4\0\31\21\4\0\15\21\1\u0136\14\21\25\0"+
    "\5\21\4\0\31\21\4\0\24\21\1\u0137\5\21\25\0"+
    "\5\21\4\0\31\21\4\0\11\21\1\167\20\21\25\0"+
    "\5\21\4\0\31\21\4\0\20\21\1\u0138\11\21\25\0"+
    "\5\21\4\0\31\21\4\0\14\21\1\u0139\15\21\25\0"+
    "\5\21\4\0\31\21\4\0\3\21\1\154\26\21\25\0"+
    "\5\21\4\0\24\21\1\u013a\4\21\4\0\25\21\1\u013a"+
    "\4\21\25\0\5\21\4\0\23\21\1\u013b\5\21\4\0"+
    "\24\21\1\u013b\5\21\25\0\5\21\4\0\7\21\1\u013c"+
    "\21\21\4\0\10\21\1\u013c\21\21\25\0\5\21\4\0"+
    "\31\21\4\0\24\21\1\u013d\5\21\25\0\5\21\4\0"+
    "\31\21\4\0\5\21\1\u013e\24\21\25\0\5\21\4\0"+
    "\31\21\4\0\1\u013f\31\21\25\0\5\21\4\0\31\21"+
    "\4\0\5\21\1\u0140\24\21\25\0\5\21\4\0\31\21"+
    "\4\0\14\21\1\u0141\15\21\25\0\5\21\4\0\31\21"+
    "\4\0\11\21\1\u0142\20\21\25\0\5\21\4\0\4\21"+
    "\1\u0143\24\21\4\0\5\21\1\u0143\24\21\25\0\5\21"+
    "\4\0\23\21\1\u0144\5\21\4\0\24\21\1\u0144\5\21"+
    "\25\0\5\21\4\0\31\21\4\0\11\21\1\u0145\20\21"+
    "\25\0\5\21\4\0\31\21\4\0\13\21\1\154\16\21"+
    "\25\0\5\21\4\0\31\21\4\0\3\21\1\u0146\2\21"+
    "\1\u0147\12\21\1\u0148\1\21\1\u0149\6\21\25\0\5\21"+
    "\4\0\31\21\4\0\22\21\1\365\7\21\25\0\5\21"+
    "\4\0\31\21\4\0\1\21\1\u014a\30\21\25\0\5\21"+
    "\4\0\31\21\4\0\16\21\1\64\13\21\25\0\5\21"+
    "\4\0\22\21\1\204\6\21\4\0\23\21\1\204\6\21"+
    "\25\0\5\21\4\0\31\21\4\0\15\21\1\252\14\21"+
    "\25\0\5\21\4\0\31\21\4\0\17\21\1\u014b\12\21"+
    "\25\0\5\21\4\0\31\21\4\0\22\21\1\u014c\7\21"+
    "\25\0\5\21\4\0\31\21\4\0\25\21\1\u014d\4\21"+
    "\25\0\5\21\4\0\31\21\4\0\25\21\1\u014e\4\21"+
    "\25\0\5\21\4\0\31\21\4\0\3\21\1\252\26\21"+
    "\25\0\5\21\4\0\31\21\4\0\25\21\1\u014f\4\21"+
    "\25\0\5\21\4\0\31\21\4\0\1\21\1\u0150\30\21"+
    "\25\0\5\21\4\0\31\21\4\0\1\21\1\u0151\30\21"+
    "\25\0\5\21\4\0\31\21\4\0\15\21\1\154\14\21"+
    "\25\0\5\21\4\0\31\21\4\0\16\21\1\257\13\21"+
    "\25\0\5\21\4\0\31\21\4\0\3\21\1\u0152\26\21"+
    "\25\0\5\21\4\0\31\21\4\0\16\21\1\u0153\13\21"+
    "\25\0\5\21\4\0\31\21\4\0\24\21\1\u0154\5\21"+
    "\25\0\5\21\4\0\31\21\4\0\24\21\1\u0155\5\21"+
    "\25\0\5\21\4\0\31\21\4\0\11\21\1\u0156\20\21"+
    "\25\0\5\21\4\0\31\21\4\0\11\21\1\u0157\20\21"+
    "\25\0\5\21\4\0\31\21\4\0\17\21\1\167\12\21"+
    "\25\0\5\21\4\0\31\21\4\0\14\21\1\252\15\21"+
    "\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[25585];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\1\1\7\11\5\1\1\11"+
    "\15\1\2\11\20\1\4\11\1\0\1\11\1\0\1\11"+
    "\3\0\1\1\1\0\4\11\22\1\1\0\50\1\1\0"+
    "\16\1\1\0\42\1\1\0\13\1\1\0\1\11\44\1"+
    "\1\0\1\11\32\1\1\0\126\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[343];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  PromQLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return PromQLTokenTypes.BAD_CHARACTER;
            }
          // fall through
          case 46: break;
          case 2:
            { return PromQLTokenTypes.WHITE_SPACE;
            }
          // fall through
          case 47: break;
          case 3:
            { return PromQLTokenTypes.COMMENT;
            }
          // fall through
          case 48: break;
          case 4:
            { return PromQLTokenTypes.MOD;
            }
          // fall through
          case 49: break;
          case 5:
            { return PromQLTokenTypes.LEFT_PAREN;
            }
          // fall through
          case 50: break;
          case 6:
            { return PromQLTokenTypes.RIGHT_PAREN;
            }
          // fall through
          case 51: break;
          case 7:
            { return PromQLTokenTypes.MULT;
            }
          // fall through
          case 52: break;
          case 8:
            { return PromQLTokenTypes.ADD;
            }
          // fall through
          case 53: break;
          case 9:
            { return PromQLTokenTypes.COMMA;
            }
          // fall through
          case 54: break;
          case 10:
            { return PromQLTokenTypes.SUB;
            }
          // fall through
          case 55: break;
          case 11:
            { return PromQLTokenTypes.DIV;
            }
          // fall through
          case 56: break;
          case 12:
            { return PromQLTokenTypes.NUMBER;
            }
          // fall through
          case 57: break;
          case 13:
            { return PromQLTokenTypes.METRIC_NAME;
            }
          // fall through
          case 58: break;
          case 14:
            { return PromQLTokenTypes.LT;
            }
          // fall through
          case 59: break;
          case 15:
            { return PromQLTokenTypes.EQ;
            }
          // fall through
          case 60: break;
          case 16:
            { return PromQLTokenTypes.GT;
            }
          // fall through
          case 61: break;
          case 17:
            { return PromQLTokenTypes.AT;
            }
          // fall through
          case 62: break;
          case 18:
            { return PromQLTokenTypes.LEFT_BRACKET;
            }
          // fall through
          case 63: break;
          case 19:
            { return PromQLTokenTypes.RIGHT_BRACKET;
            }
          // fall through
          case 64: break;
          case 20:
            { return PromQLTokenTypes.POW;
            }
          // fall through
          case 65: break;
          case 21:
            { return PromQLTokenTypes.LEFT_BRACE;
            }
          // fall through
          case 66: break;
          case 22:
            { return PromQLTokenTypes.RIGHT_BRACE;
            }
          // fall through
          case 67: break;
          case 23:
            { return PromQLTokenTypes.NE;
            }
          // fall through
          case 68: break;
          case 24:
            { return PromQLTokenTypes.NRE;
            }
          // fall through
          case 69: break;
          case 25:
            { return PromQLTokenTypes.STRING;
            }
          // fall through
          case 70: break;
          case 26:
            { return PromQLTokenTypes.DURATION;
            }
          // fall through
          case 71: break;
          case 27:
            { return PromQLTokenTypes.LE;
            }
          // fall through
          case 72: break;
          case 28:
            { return PromQLTokenTypes.DEQ;
            }
          // fall through
          case 73: break;
          case 29:
            { return PromQLTokenTypes.RE;
            }
          // fall through
          case 74: break;
          case 30:
            { return PromQLTokenTypes.GE;
            }
          // fall through
          case 75: break;
          case 31:
            { return PromQLTokenTypes.BY;
            }
          // fall through
          case 76: break;
          case 32:
            { return PromQLTokenTypes.ON;
            }
          // fall through
          case 77: break;
          case 33:
            { return PromQLTokenTypes.OR;
            }
          // fall through
          case 78: break;
          case 34:
            { return PromQLTokenTypes.FUNCTION;
            }
          // fall through
          case 79: break;
          case 35:
            { return PromQLTokenTypes.AND;
            }
          // fall through
          case 80: break;
          case 36:
            { return PromQLTokenTypes.AGGREGATION_OPERATOR;
            }
          // fall through
          case 81: break;
          case 37:
            { return PromQLTokenTypes.BOOL;
            }
          // fall through
          case 82: break;
          case 38:
            { return PromQLTokenTypes.TIME_RANGE;
            }
          // fall through
          case 83: break;
          case 39:
            { return PromQLTokenTypes.SUBQUERY_RANGE;
            }
          // fall through
          case 84: break;
          case 40:
            { return PromQLTokenTypes.OFFSET;
            }
          // fall through
          case 85: break;
          case 41:
            { return PromQLTokenTypes.UNLESS;
            }
          // fall through
          case 86: break;
          case 42:
            { return PromQLTokenTypes.WITHOUT;
            }
          // fall through
          case 87: break;
          case 43:
            { return PromQLTokenTypes.IGNORING;
            }
          // fall through
          case 88: break;
          case 44:
            { return PromQLTokenTypes.GROUP_LEFT;
            }
          // fall through
          case 89: break;
          case 45:
            { return PromQLTokenTypes.GROUP_RIGHT;
            }
          // fall through
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
